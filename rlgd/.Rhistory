install.packages("formula.tools")
library(formula.tools)
library(rlgd)
?get_x_y
library(rlgd)
?batch_gradient_descent
library(rlgd)
?stochastic_gradient_descent
library(rlgd)
m <- nrow(y)
blocs_size <- trunc((m / 3))
blocs <- list()
index <- seq(1, m, blocs_size - 1)
for (j in 1:trunc(m / blocs_size)) {
y_i <- as.matrix(y[index[[j]]:index[[j + 1]], ])
x_i <- as.matrix(x[index[[j]]:index[[j + 1]], ])
blocs[[j]] <- list(x_i, y_i)
}
print(blocs)
usethis::use_data(blocs)
fit(classe ~ ., train_set, mode = "batch", batch_size = 32, learning_rate = 0.01, max_iter = 40000, tol = 1e-4)
library(rlgd)
?fit
set.seed(10)
train_index <- createDataPartition(data$classe, p = 0.7, list = F)
install.packages("caret")
library(caret)
set.seed(10)
train_index <- createDataPartition(data$classe, p = 0.7, list = F)
train_set <- data[train_index, ]
test_set <- data[-train_index, ]
table(train_set$classe)
usethis::use_data(train_set)
usethis::use_data(test_set)
res1 <- fit(classe ~ ., train_set, mode = "batch", batch_size = 32, learning_rate = 0.01, max_iter = 40000, tol = 1e-4)
res1
res_fit_batch <- fit(classe ~ .,train_set,mode="batch",batch_size=32,learning_rate=0.01,max_iter=40000,tol=1e-4)
usethis::use_data(res_fit_batch)
library(parallel)
